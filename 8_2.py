# Функция для подсчета суммы чисел в коллекции и обработки некорректных данных
def personal_sum(numbers):
    # Инициализируем переменные для суммы и количества некорректных данных
    result = 0
    incorrect_data = 0

    # Перебираем все элементы в коллекции numbers
    for num in numbers:
        try:
            # Пробуем добавить число в сумму
            result += num
        except TypeError:
            # Если возникает ошибка типа (например, если элемент не число),
            # увеличиваем счётчик некорректных данных
            incorrect_data += 1
            print(f'Некорректный тип данных для подсчёта суммы - {num}')

    # Возвращаем кортеж из суммы и количества некорректных данных
    return result, incorrect_data


# Функция для вычисления среднего арифметического
def calculate_average(numbers):
    # Проверяем, что numbers является коллекцией (списком, кортежем, и т.п.)
    if not isinstance(numbers, (list, tuple)):
        print('В numbers записан некорректный тип данных')
        return None

    # Получаем сумму чисел и количество некорректных данных с помощью функции personal_sum
    total_sum, incorrect_data_count = personal_sum(numbers)

    # Если количество некорректных данных больше нуля, то возвращаем None
    # или если коллекция пустая (среднее деление на 0)
    if incorrect_data_count > 0 or len(numbers) == 0:
        # Если данные некорректны или коллекция пустая, возвращаем 0 или None
        return 0

    # Возвращаем среднее арифметическое (сумма делится на количество чисел)
    return total_sum / len(numbers)


# Примеры использования функции calculate_average с различными вариантами данных

# Пример 1: Строка, которая не может быть обработана как числа
print(f'Результат 1: {calculate_average("1, 2, 3")}')  # Строка - некорректный тип данных

# Пример 2: Список, содержащий числа и строки
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')  # Учитываются только 1 и 3

# Пример 3: Передано одно число, а не коллекция
print(f'Результат 3: {calculate_average(567)}')  # Некорректный тип данных

# Пример 4: Корректный список чисел
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')  # Все данные корректные


''' Объяснение работы кода:
Функция personal_sum(numbers):

Эта функция принимает коллекцию numbers, перебирает каждый элемент и пытается сложить числа.
Если элемент не является числом, возникает исключение TypeError, и в этом случае элемент игнорируется, но выводится сообщение о некорректном типе данных.
В конце возвращается кортеж из суммы чисел и количества некорректных данных.
Функция calculate_average(numbers):

Проверяет, является ли переданный параметр коллекцией (списком или кортежем).
Если это не коллекция, выводится сообщение об ошибке.
Использует функцию personal_sum для подсчета суммы и количества некорректных данных. Если в коллекции есть некорректные данные или коллекция пуста, возвращает 0 или None.
В случае корректных данных возвращает среднее арифметическое (сумму чисел, деленную на количество).'''
